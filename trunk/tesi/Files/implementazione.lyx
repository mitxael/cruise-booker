#LyX 1.6.4 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass article
\use_default_options false
\language italian
\inputencoding utf8
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
chapter{Implementazione}
\end_layout

\end_inset

 
\end_layout

\begin_layout Standard
In questo capitolo si descrivono e si motivano le scelte progettuali realizzate
 nell'implementazione dell'applicazione, soffermandosi in particolar modo
 sulle migliorie apportate al programma di partenza.
 Sono inoltre descritti due esercizi rappresentativi 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Esempi"

\end_inset

, per spiegare brevemente l'utilizzo dell'applicazione da parte degli studenti.
\end_layout

\begin_layout Section
Descrizione iniziale
\end_layout

\begin_layout Standard
Il software realizzato si presenta allo studente con una schermata iniziale
 contenente l'elenco degli esercizi preparati organizzati tramite una struttura
 ad albero per argomenti.
 Selezionando un particolare esercizio si visualizza nella parte inferiore
 della finestra una breve descrizione dell'esercitazione.
\end_layout

\begin_layout Standard
Una volta scelta l'attività, allo studente si apre un'ulteriore finestra,
 molto simile a quella del sistema Trakla2, ma con qualche integrazione,
 di cui si parlerà in seguito in questo capitolo.
 In modo analogo al sistema di esercizi originale, l'utente deve simulare
 il comportamento dell'algoritmo in analisi, ed ha la possibilità di valutare
 il proprio risultato, e di vederne la risoluzione corretta.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{figure}[htbp]
\end_layout

\begin_layout Plain Layout


\backslash
centering
\end_layout

\begin_layout Plain Layout


\backslash
includegraphics[scale=0.4]{images/Menu.png}
\end_layout

\begin_layout Plain Layout


\backslash
caption{Menu iniziale}
\end_layout

\begin_layout Plain Layout


\backslash
end{figure}
\end_layout

\end_inset


\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Modifiche-apportate"

\end_inset

Modifiche apportate
\end_layout

\begin_layout Standard
E' stato scelto di sviluppare esclusivamente esercizi di simulazione di
 algoritmi perchè in questo modo lo studente è il protagonista effettivo
 dell'animazione.
 Il programma quindi non permette all'utente di realizzare una propria animazion
e, in quanto questa funzione di MatrixPro non è stata inclusa nel nuovo
 software.
 Questa scelta è stata presa per due motivazioni: 
\end_layout

\begin_layout Itemize
i destinatari del programma sono studenti, non insegnanti, e quindi si presuppon
e (in accordo con gli studi riportati nel capitolo 
\begin_inset CommandInset ref
LatexCommand ref
reference "capitolo1"

\end_inset

) che siano più portati a utilizzare le visualizzazioni e sperimentarne
 il comportamento attraverso l'inserimento di nuovi dati, piuttosto che
 a creare nuove animazioni;
\end_layout

\begin_layout Itemize
esistono già validi strumenti per la creazione di animazioni personalizzate,
 come per l'appunto il software MatrixPro, che permettono di realizzarle
 semplicemente anche in pochi minuti; l'obiettivo di questa tesi è di realizzare
 qualcosa di nuovo e poco diffuso, piuttosto che creare un programma già
 disponibile.
\end_layout

\begin_layout Standard
Inoltre, se si rendesse necessario, è possibile in un secondo momento integrare
 il progetto al sistema MatrixPro in modo analogo a come il sistema Trakla2
 è stato unito a quest'ultimo.
\end_layout

\begin_layout Standard
Per realizzare al meglio un'applicazione semplice nell'uso, e soprattutto
 interattiva, sono state apportate alcune modifiche ed estenzioni al programma
 originale.
 Nelle prossime sezioni saranno analizzate in dettaglio le variazioni.
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Tipologie-di-Esercizi"

\end_inset

Tipologie di Esercizi
\end_layout

\begin_layout Standard
Durante la realizzazione del progetto, si è osservato che per alcune categorie
 di algoritmi la tecnica dell'esercizio di simulazione non era adatta, in
 quanto l'esercizio risultava essere poco interessante per l'utente poichè
 consisteva in un gran numero di operazioni da eseguire tutte simili tra
 loro.
 L'esempio più rappresentativo di questa problematica è la categoria degli
 algortimi di programmazione dinamica: lo studente dovendo riempire con
 dei numeri una tabella (vedi esercizio Longest Common Subsequence), perde
 interesse nell'argomento e non approfondisce adeguatamente il problema
 e la sua soluzione.
\end_layout

\begin_layout Standard
Per questo motivo si è scelto di dividere la raccolta di problemi in due
 sottoinsiemi: gli esercizi e le animazioni.
 Per la prima parte si sono realizzati esercizi di simulazione molto simili
 a quelli forniti da Trackla2, mentre per la seconda parte sono stati prodotte
 animazioni dell'algoritmo, analoghe alla modalità 
\begin_inset Quotes eld
\end_inset

Model Answer
\begin_inset Quotes erd
\end_inset

 degli esercizi.
 Per le simulazioni, è stata quindi sacrificata un po' di interattività
 a favore di una maggiore chiarezza dell'esercizio.
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Input-a-scelta"

\end_inset

Input a scelta
\end_layout

\begin_layout Standard
In accordo con i risultati degli studi di cui si parla nel capitolo 
\begin_inset CommandInset ref
LatexCommand ref
reference "SCORRETTA:Ref: capitolo1"

\end_inset

, è stata aggiunta al programma la possibilità per l'utente di inserire
 dati in ingresso scelti personalmente.
 Il software Trakla2 invece automaticamente generava un insieme di dati
 casuali.
\end_layout

\begin_layout Standard
Questa nuova funzione garantisce un buon livello di interattività dell'utente,
 con il minimo sforzo da parte di quest'ultimo: lo studente può infatti
 inserire particolari dati per osservare il comportamento dell'algoritmo
 nei casi limite.
 E' sempre comunque permesso l'utilizzo di input casuali generati dal sistema.
\end_layout

\begin_layout Standard
La preferenza per una particolare tipologia di input avviene successivamente
 alla scelta dell'esercizio: allo studente si presenta una finestra in cui
 deve decidere se utilizzare i propri dati oppure farli generare al programma.
 Se opta per l'input personalizzato, a seconda dell'esercizio in analisi
 utilizzerà diversi tecniche per l'inserimento.
 In particolare il diverso procedimento dipende dal tipo di struttura dati
 che utilizza l'algoritmo.
 Il primo passo è comune alle tre tecniche: l'utente deve inserire l'elenco
 delle chiavi (elementi di un vettore, nodi di un grafo, nomi dei punti)
 all'interno di un campo di testo.
 In alcuni casi non è previsto l'inserimento di queste chiavi, in quanto
 non sono necessarie per la particolare simulazione.
 La dimensione dell'input è definita implicitamente in questo passaggio.
 Il prossimo è invece discriminante delle varie tecniche, e lo analizziamo
 nel dettaglio:
\end_layout

\begin_layout Itemize
Esercizi 
\begin_inset Quotes eld
\end_inset

normali
\begin_inset Quotes erd
\end_inset

, in questa categoria rientrano tutti gli esercizi che non utilizzano particolar
i strutture dati (grafi o aree geometriche), e quindi principalmente contengono
 vettori e/o alberi.
 Se l'esercitazione necessita solo di un elenco di valori-chiave con i quali
 riempire la struttura, allora nessun'altra finestra viene visualizzata,
 e lo studente passa direttamente all'attività di simulazione.
 Se sono previsti dati aggiuntivi, come per esempio i parametri di una funzione
 di hashing, si presenta una finestra in cui è possibile inserire i valori
 di suddetti parametri aggiuntivi.
\end_layout

\begin_layout Itemize
Grafi, la creazione di un grafo necessita di un elenco di nodi, ma soprattutto
 della relazione di adiacenza tra questi.
 Nell'applicazione l'inserimento di tale informazione è stato realizzato
 tramite una matrice di adiacenza.
 Lo studente si trova di fronte ad una seconda finestra, in cui è presentata
 una matrice costruita nel seguente modo: le cui righe e colonne sono etichettat
e con i nodi precedentemente inseriti, ed ogni elemento interno è un'area
 di testo (se il grafo ha archi pesati) in cui si deve inserire il peso
 del relativo arco (0 equivale a arco assente), oppure una casella di spunta
 per indicare se esiste o meno un arco tra i due nodi.
 Se si sta parlando di un grafo non orientato, è possibile inserire le informazi
oni della relazione solo nella parte triangolare inferiore della matrice.
\end_layout

\begin_layout Itemize
Geometria, per i due problemi di geometria computazionale è stato creata
 una tecnica di input molto simile al primo tipo, in cui è possibile inserire
 le coppie di coordinate (x,y) di ogni punto precedentemente aggiunto.
\end_layout

\begin_layout Standard
Inizialmente era prevista anche un'ulteriore tipologia di inserimento dati:
 i Test Cases [tradurre].
 Essi prevedevano di fornire un paricolare insieme di dati preparati dal
 programmatore (come suggerito della guida 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cite{wikiAlgoViz}
\end_layout

\end_inset

) che permettessero allo studente di osservare il comportamento dell'algoritmo
 in situazioni limite, poichè egli potrebbe non avere l'intuizione corretta
 per realizzarle tramite un input personalizzato.
 Successivamente questa possibilità è stata accantonata per problemi di
 tempi nel completamento del progetto, e per concentrarsi su altri aspetti
 dell'applicazione.
 L'inserimento di tale funzione in un secondo momento non è comunque esclusa.
\end_layout

\begin_layout Subsection
Documentazione algoritmo
\end_layout

\begin_layout Standard
Sono state fatte alcune integrazioni anche dal punto di vista dell'interfaccia
 grafica del software, in particolare per la finestra di simulazione degli
 esercizi, che sono descritte in questa e nelle due sezioni successive.
\end_layout

\begin_layout Standard
Per prima cosa è stato aggiunto un pannello laterale nella parte sinistra
 della finestra, che contiene a sua volta tre pannelli tab [tabpanel..
 come si traduce?].
 In questa sezione analizzeremo due di questi pannelli.
\end_layout

\begin_layout Standard
Il pannello 
\begin_inset Quotes eld
\end_inset

Descrizione
\begin_inset Quotes erd
\end_inset

 contiene alcune informazioni dell'algoritmo, in particolare una breve descrizio
ne del problema affrontato, e le istruzioni fondamentali per poter affrontare
 la simulazione nell'esercizio.
 
\end_layout

\begin_layout Standard
Un secondo pannello contiene lo pseudo codice dell'algoritmo in questione,
 ed è tratto dal libro 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cite{libro}
\end_layout

\end_inset

.
 In alcuni casi il codice di un particolare problema non era presente su
 questo libro, e quindi si riferisce ad un altro libro 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cite{cormen}
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
La gestione dei testi relativi ad ogni esercizio è stata realizzata con
 l'aiuto di un file di testo esterno al codice, contenente tutte queste
 proprietà.
 In questo modo si semplificano eventuali modifiche future della documentazione,
 che non necessitano la compilazione del codice sorgente, ma che consistono
 semplicemente in un aggiornamento di questo file.
 Inoltre, si permette ad un potenziale docente che utilizza un diverso testo
 per il proprio corso, di aggiornare i codici e le informazioni degli algoritmi
 secondo le proprie preferenze.
\end_layout

\begin_layout Standard
La scelta di aggiungere questa sezione informativa al software è stata fatta
 in seguito all'analisi degli altri programmi disponibili 
\begin_inset CommandInset ref
LatexCommand ref
reference "SCORRETTA:Ref: sec:Strumenti-Disponibili"

\end_inset

, ma che JHAVE' 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cite{JHAVE}
\end_layout

\end_inset

 il quale forniva allo studente una documentazione sull'argomento come integrazi
one all'esercizio.
 Anche qui i testi di sussidio non erano integrati nel codice, ma memorizzati
 in pagine html [verificare].
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Domande-relative-esercizio"

\end_inset

Domande relative esercizio
\end_layout

\begin_layout Standard
Un'altra funzionalità che è stata aggiunta al programma prendendo spunto
 dalle caratteristiche di JAHVE' 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cite{JHAVE}
\end_layout

\end_inset

, è la possibilità di confrontarsi con alcune domande a proposito dell'algoritmo
 o della struttura dati analizzati.
 Nel programma JHAVE, l'animazione del problema viene interrotta ponendo
 domande sull'argomento allo studente, con una frequenza che varia a seconda
 di alcuni parametri impostati dal programmatore.
 Lo studente per poter continuare l'animazione deve rispondere alle domande
 che gli sono poste.
 Provando ad utilizzare questo programma, alcuni studenti del corso di Informati
ca hanno trovato fastidioso essere continuamente fermati nella presentazione
 da queste domande.
 Nel nuovo progetto realizzato si è quindi optato per inserire la possibilità
 di rispondere alle domande, ma a scelta dello studente.
\end_layout

\begin_layout Standard
Il pulsante per poter sottoporsi ad una domanda è posto nel terzo pannello
 sulla sinistra, insieme ai due di cui si è parlato nelle sezioni precedenti.
 Le domande, che variano da 3 a 5 per ogni esercizio, sono di due tipologie:
 a scelta multipla o a risposta aperta (in cui lo studente risponde scrivendo
 all'interno di un campo di testo), e vengono visualizzate tramite una piccola
 finestra.
 Una volta inserita la risposta, il programma comunica allo studente se
 è esatta o meno; nel caso fosse sbagliata viene visualizzata la soluzione
 giusta.
 Le domande e le loro risposte sono inserite direttamente nel codice di
 ogni esercizio.
 Questo è sicuramente un punto debole, e quindi un miglioramento futuro
 potrà trasportarle all'esterno del codice, magari in un file di testo esterno,
 come per la documentazione degli esercizi.
\end_layout

\begin_layout Standard
E' stata inoltre sperimentata la possibilità di creare domande 
\begin_inset Quotes eld
\end_inset

dinamiche
\begin_inset Quotes erd
\end_inset

, ovvero che interagiscono direttamente con il contenuto dell'esercizio.
 Per esempio in un esercizio di inserimento di dati in un albero di ricerca
 binario, si potrebbe chiedere: 
\begin_inset Quotes eld
\end_inset

In quale nodo andrà inserita la prossima chiave K
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

(Risposta) S
\begin_inset Quotes erd
\end_inset

.
 In questo caso, sia la domanda che la risposta, saranno modificate con
 i dati dell'esercizio, sostituendo a K il valore della chiave che si è
 prossimi ad inserire nella struttura, e a S il nome del nodo che diventerà
 padre di K.
\end_layout

\begin_layout Subsection
FeedBak RealTime
\end_layout

\begin_layout Standard
I programmi di animazione di algoritmi sono usati spesso da studenti alle
 prime armi con un determinato argomento, e che hanno bisogno di vedere
 e toccare con mano per riuscire a focalizzare al meglio il problema.s Uno
 studente non ferrato in un particolare algoritmo non riuscirà a simulare
 correttamente già la prima volta l'esercizio, e dovrà ricorrere continuamente
 alla funzione di Model Answer per controllare se si sta muovendo correttamente
 nella struttura dati.
 Per agevolare il primo apprendimento dell'argomento, si è quindi pensato
 di aggiugere, sempre nella parte sinistra dello schermo, un'area di testo
 che reagisce ai cambiementi effettuati dall'utente sulle strutture dati,
 modificando il proprio testo e comunicando attraverso questo allo studente
 se la simulazione di ogni passo è corretta.
 Per ogni esercizio il criterio con cui si stabilisce se un particolare
 passo è corretto, e il testo che di conseguenza deve apparire, sono diversi
 e incorporati nel codice.
\end_layout

\begin_layout Standard
Per un utente esperto che vuole verificare le proprie conoscenze, questa
 funzione può essere di disturbo: è stata perciò inserita la possibilità
 di disattivare l'area di testo semplicemente un pulsante.
 L'area può essere tuttavia riattivata in un secondo momento.
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Esempi"

\end_inset

Esempi
\end_layout

\begin_layout Standard
In questa sezione sono descritti due esercizi del programma, rappresentativi
 delle due tipologie spiegate nella sezione 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Tipologie-di-Esercizi"

\end_inset

.
 In particolare si analizza per la categoria degli esercizi di simulazione
 l'Inserimento in un Albero Binario di Ricerca, e per la categoria delle
 animazioni, il calcolo del numero di Fibonacci con la programmazione dinamica.
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Inserimento-di-Chiavi"

\end_inset

Inserimento di Chiavi in un Albero Binario di Ricerca
\end_layout

\begin_layout Standard
Lo studente, una volta scelto l'esercizio dall'elenco principale, ha la
 possibilità di scegliere il metodo di inserimento dei dati che preferisce.
 Come si è spiegato in 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Input-a-scelta"

\end_inset

, le opzioni disponibili sono di inserire le informazioni, oppure di lasciare
 che siano generate casualmente dal programma.
 Nel primo caso, l'utente deve inserire in un campo di testo gli elementi
 che desidera inserire nell'albero, che devono essere lettere separate da
 una virgola.
 Se i dati inseriti non sono corretti (ad esempio una stringa vuota), l'applicaz
ione ripropone allo studente la finestra di scelta dell'input, in modo che
 al momento della generazione dell'esercizio i dati siano presenti e corretti.
\end_layout

\begin_layout Standard
L'utente si trova quindi di fronte alla finestra dell'esercizio vero e proprio.
 Sulla sinistra dello schermo si trova il pannello laterale contenente le
 funzioni aggiuntive descritte in 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Modifiche-apportate"

\end_inset

.
 In questo esercizio l'area di testo dedicata ai messaggi del programma,
 al momento è vuota, e in seguito conterrà il risultato della visita in
 ordine dell'albero quando l'utente inserisce correttamente i nodi, oppure
 un messaggio di errore 
\begin_inset Quotes eld
\end_inset

Attento!
\begin_inset Quotes erd
\end_inset

 quando commette un qualche sbaglio nell'inserimento.
\end_layout

\begin_layout Standard
Nella parte superiore è presente un pannello contenente quattro pulsanti
 e una barra di scorrimento chiamato Animatore [controllare], il quale permette
 durante la simulazione dell'algoritmo di muoversi all'interno dell'animazione
 creata fino a quel momento, concedendo anche l'opportunità di modificare
 i passi precedenti.
\end_layout

\begin_layout Standard
Infine al centro della finestra si trova il pannello principale contenente
 le strutture grafiche interattive, chiamato Structure Panel.
 In questo esempio al suo interno si trovano un vettore contenente le chiavi
 inserite in precedenza, e un albero al momento costituito solo da un nodo
 vuoto.
 Come descritto del pannello 
\begin_inset Quotes eld
\end_inset

Descrizione
\begin_inset Quotes erd
\end_inset

 a sinistra, lo studente deve inserire nell'ordine in cui appaiono nel vettore,
 le lettere all'interno dell'albero.
 La relazione di confronto tra le chiavi è l'ordine alfabetico; se due chiavi
 hanno lo stesso valore, la nuova va inserita alla destra di quella vecchia.
\end_layout

\begin_layout Standard
Per inserire le chiavi nell'albero è necessario cliccare su di esse nel
 vettore e trascinarle nella posizione desiderata.
 Per facilitare questa procedura, l'applicazione evidenzia con un colore
 rosso l'area adatta al rilascio della chiave quando viene attraversata
 dal puntatore del mouse.
 Se si commette qualche errore nell'inserimento, non si deve trascinare
 nuovamente la chiave nel vettore: è necessario utilizzare i comandi soprastanti
 di spostamento nell'animazione.
\end_layout

\begin_layout Standard
Quando si è terminata la simulazione si hanno a disposizione alcune funzioni
 di controllo del proprio risultato fornite anche dal programma originale,
 che sono 
\begin_inset Quotes eld
\end_inset

Grade
\begin_inset Quotes erd
\end_inset

 che comunica quanti passaggi corretti sono stati effettuati, 
\begin_inset Quotes eld
\end_inset

Model Answer
\begin_inset Quotes erd
\end_inset

 che fornisce l'animazione dell'algoritmo e 
\begin_inset Quotes eld
\end_inset

Compare
\begin_inset Quotes erd
\end_inset

 che permette di confrontare passo passo l'animazione prodotta dallo studente
 e quella corretta del programma, sia in maniera sincrona che non.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{figure}[htbp]
\end_layout

\begin_layout Plain Layout


\backslash
centering
\end_layout

\begin_layout Plain Layout


\backslash
includegraphics[scale=0.4]{images/ABR.png}
\end_layout

\begin_layout Plain Layout


\backslash
caption{Inserimento in Albero Binario di Ricerca}
\end_layout

\begin_layout Plain Layout


\backslash
end{figure} 
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Fibonacci
\end_layout

\begin_layout Standard
L'esercizio del calcolo del numero di fibonacci contenuto nel programma,
 è basato sulla tecnica della programmazione dinamica, ed è realizzato,
 per le motivazioni espresse in 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Tipologie-di-Esercizi"

\end_inset

, come un'animazione e non un esercizio.
\end_layout

\begin_layout Standard
Nonostante questo si ha, come per gli altri esercizi, la scelta di usare
 un input casuale o di inserirlo personalmente.
 L'esercizio di fibonacci prevede di ricevere come dato esterno solo un
 numero intero maggiore di 0.
 Per questo, se lo studente sceglie di inserire lui stesso i dati, non gli
 si presenterà la finestra per l'introduzione delle chiavi, bensì quella
 dedicata all'immissione dei parametri integrativi.
 In questa è presente solo un campo etichettato con il nome 
\begin_inset Quotes eld
\end_inset

n
\begin_inset Quotes erd
\end_inset

 in cui si deve immettere il numero intero di cui si vuole calcolare il
 relativo valore nella serie di Fibonacci.
\end_layout

\begin_layout Standard
La finestra dell'animazione che si presenta all'utente è molto simile per
 struttura a quella degli esercizi come 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Inserimento-di-Chiavi"

\end_inset

, con la differenza che non è possibile interagire direttamente con le strutture
 presenti nel pannello centrale.
 L'attività proposta infatti non è altro che un'animazione classica, con
 alcune integrazioni, il cui andamento può essere controllato dal pannello
 Animatore posto nella parte superiore della finestra.
\end_layout

\begin_layout Standard
Nella parte centrale sono poste due strutture un vettore di un elemento
 contenente il numero di Fibonacci inserito o generato dall'applicazione,
 e un vettore al momento vuoto.
 Proseguendo nell'animazione si osserva il funzionamento dell'algoritmo
 di programmazione dinamica (il cui pseudocodice è presente del pannello
 laterale), il quale riempie l'array un elemento alla volta con il relativo
 valore di Fibonacci.
 Il valore contenuto nell'ultimo elemento è il numero di Fibonacci corrispondent
e al numero inserito.
\end_layout

\begin_layout Standard
Al termine delle animazioni, non sono disponibili le funzioni model answer
 e grade, in quanto non si è trattato di un esercizio vero e proprio, ma
 solo di una dimostrazione.
 Le funzioni aggiunte 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Modifiche-apportate"

\end_inset

 sono invece attive: per esempio l'area di testo dedicata ai messaggi, contiene
 ad ogni passaggio il calcolo del successivo elemento da inserire.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{figure}[htbp]
\end_layout

\begin_layout Plain Layout


\backslash
centering
\end_layout

\begin_layout Plain Layout


\backslash
includegraphics[scale=0.4]{images/Fibonacci.png}
\end_layout

\begin_layout Plain Layout


\backslash
caption{Animazione di Fibonacci}
\end_layout

\begin_layout Plain Layout


\backslash
end{figure} 
\end_layout

\end_inset


\end_layout

\begin_layout Section
Implementazione, concetti base
\end_layout

\begin_layout Standard
Il software MatrixPro, di cui sono disponibili i codici sorgente, è scritto
 in codice Java e organizzato in numerosi pacchetti.
\end_layout

\begin_layout Standard
Gli esercizi non sono altro che una classe Java, che a seconda della categoria
 a cui appartengono, implementano particolari interfacce che ne definiscono
 le caratteristiche.
 Tutti gli esercizi per essere tali devono definire almeno le procedure
 fondamentali come quelle di inizializzazione, quelle per definire l'interazione
 dell'utente con le strutture, e infine quelle per creare l'animazione risultato.
\end_layout

\begin_layout Standard
Le interfacce grafiche sono organizzate in maniera gerarchica a seconda
 della loro funzione.
 La struttura principale che coinvolge gli esercizi è lo Structure Panel,
 ovvero l'area centrale in cui sono presenti le strutture dati dell'algoritmo.
 Il pannello gestisce l'aggiunta e il comportamento di queste strutture,
 nonchè la loro visualizzazione.
\end_layout

\begin_layout Standard
Anche le strutture dati sono orgranizzate in modo gerarchico, sia dal punto
 di vista del codice, che dalla presentazione che viene offerta all'utente.
 Sono infatti suddivise in FDT (Fundamental Data Type) e CDT (Conceptual
 Data Type), ovvero strutture primitive e strutture astratte.
 Le prime sono tipi basilari come vettori, liste, grafi e chiavi, e i comportame
nti che consentono sono semplici assegnazioni e modifiche dei collegamenti
 (per grafi e liste).
 I CDT invece consistono in strutture più complesse per quanto riguarda
 la loro costruzione e anche per i loro comportamenti.
 Un esempio di questa categoria è la pila (Stack), realizzata a partire
 da un vettore, al quale sono associate solo particolari operazioni (pop,
 push..).
 Le due diverse categorie di strutture possono essere utilizzate allo stesso
 modo senza problemi negli esercizi.
\end_layout

\begin_layout Standard
Un altro elemento fondamentale per la creazione delle animazione è la classe
 
\begin_inset Quotes eld
\end_inset

Animator
\begin_inset Quotes erd
\end_inset

.
 Essa gestisce la memorizzazione dei passi dell'animazione, e lo fa immagazzinan
do in uno stack gli stati delle strutture interessate nella visualizzazione.
 E' questa classe che gestisce lo spostamento all'interno dell'animazione.
 Essa inoltre permette la valutazione tramite la funzione 
\begin_inset Quotes eld
\end_inset

Grade
\begin_inset Quotes erd
\end_inset

 di un esercizio: il risultato è dato infatti confrontando passo passo la
 simulazione del programma e quella fornita dallo studente, entrambe memorizzate
 in un animatore.
\end_layout

\begin_layout Standard
Lo sviluppo di nuovi esercizi consiste quindi nella programmazione di nuove
 classi Esercizio, e nella realizzazione, se necessario, di nuove strutture
 dati, progettate a partire da quelle già presenti nell'applicazione.
\end_layout

\end_body
\end_document
